import { createReactAgent } from '@langchain/langgraph/prebuilt';
import { chatModel, Model } from './model';
import { tool } from '@langchain/core/tools';
import { z } from 'zod';
import { SystemMessage } from '@langchain/core/messages';
import ollama from 'ollama';

const fetchJson = async (url: string) => {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`Fetch error ${res.status}`);
    return res.json();
};

const fetchText = async (url: string) => {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`Fetch error ${res.status}`);
    return res.text();
};

// üì¶ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 1: –Ω–∞–¥–≤–æ—Ä'–µ
const weatherTool = tool(
    async ({ city }: { city: string }) => {
        const res = await fetchText(`https://wttr.in/${city}?format=3`);
        return res || 'Cannot find weather.';
    },
    {
        name: 'get_weather',
        description: 'Get current weather for a given city',
        schema: z.object({ city: z.string() }), // –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ã—ñ
    }
);

const getProverbByTopic = tool(
    async () => {
        console.log('Fetching proverbs');

        const res = (await fetchJson(
            'https://gist.githubusercontent.com/bel-frontend/41775a79904f2535c4dd97d7990ad83d/raw/dc6c5cb1a849961833dd157454fd3ec11129883b/index.json'
        )) as { message: string }[];

        console.log(res);

        const allProverbsInOneString = res.reduce((acc, curr) => {
            return acc + curr.message + '\n';
        }, '');

        return allProverbsInOneString || 'Cannot find proverbs.';
    },
    {
        name: 'get_proverb_by_topic',
        description:
            'Get full list of proverbs for search or selecting by topic or random',
    }
);

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ –≤—ã—è–≤—É –∑ URL —ñ –≤—è—Ä—Ç–∞–µ —è–µ —è–∫ base64-—Ä–∞–¥–æ–∫
 * –ü—Ä–∞—Ü—é–µ –∑ —É–±—É–¥–∞–≤–∞–Ω—ã–º fetch —É Node.js >=18
 */
export const imageUrlToBase64 = async (imageUrl: string): Promise<string> => {
    const response = await fetch(imageUrl);
    if (!response.ok) {
        throw new Error(`–ù–µ —û–¥–∞–ª–æ—Å—è –∑–∞–≥—Ä—É–∑—ñ—Ü—å –≤—ã—è–≤—É: ${response.statusText}`);
    }

    const arrayBuffer = await response.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    return buffer.toString('base64');
};

const getReceptFromRefregeratorImage = tool(
    async ({ imageUrl }: { imageUrl: string[] }) => {
        try {
            console.log('Processing image URLs:', imageUrl);

            if (!imageUrl || imageUrl.length === 0) {
                return '–ù–µ –∞—Ç—Ä—ã–º–∞–ª–∞—Å—è –∞—Ç—Ä—ã–º–∞—Ü—å –≤—ã—è–≤—É –∑ URL.';
            }
            let imagesBase64 = await Promise.all(
                imageUrl.map((url) => imageUrlToBase64(url))
            );

            const response = await ollama.chat({
                model: 'gemma3:12b',
                messages: [
                    {
                        role: 'user',
                        content: 'What goods are in my refrigerator?',
                        images: imagesBase64,
                    },
                ],
            });
            console.log(response.message.content);

            return response.message.content || '–ù–µ —û–¥–∞–ª–æ—Å—è –∞–ø—Ä–∞—Ü–∞–≤–∞—Ü—å –≤—ã—è–≤—É.';
        } catch (error) {
            console.error('Error processing image:', error);
            return '–ù–µ —û–¥–∞–ª–æ—Å—è –∞–ø—Ä–∞—Ü–∞–≤–∞—Ü—å –≤—ã—è–≤—É. –ü—Ä–∞–≤–µ—Ä URL —ñ —Ñ–∞—Ä–º–∞—Ç –≤—ã—è–≤—ã.';
        }
    },
    {
        name: 'get_recept_from_refregerator_image',
        description: 'Get detailed recipe(s) from refrigerators goods on images',
        schema: z.object({ imageUrl: z.array(z.string()) }), // –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ã—ñ
    }
);

const model = await chatModel(Model.GPT4o);

export const agentApp = ({ bot }: { bot: any }) => {
    const getDogPhoto = tool(
        async () => {
            const res = (await fetchJson(
                'https://dog.ceo/api/breeds/image/random'
            )) as { message: string };
            const imageUrl = res?.message;
            if (!imageUrl) return '–ù–µ —û–¥–∞–ª–æ—Å—è –∞—Ç—Ä—ã–º–∞—Ü—å –≤—ã—è–≤—É —Å–∞–±–∞–∫—ñ.';
            bot.channel.send({
                content: '–í–æ—Å—å –≤–∞–º –≤—ã—è–≤–∞ —Å–∞–±–∞–∫—ñ:',
                files: [imageUrl],
            });

            return '–í—ã—è–≤–∞ —Å–∞–±–∞–∫—ñ –¥–∞—Å–ª–∞–Ω–∞—è.';
        },
        {
            name: 'get_dog_photo',
            description: `Get a random dog photo and send it to the user in the chat`,
        }
    );

    return createReactAgent({
        llm: model,
        tools: [
            weatherTool,
            getProverbByTopic,
            getDogPhoto,
            getReceptFromRefregeratorImage,
        ],
        messageModifier:
            new SystemMessage(`–¢—ã —Ä–∞–∑—É–º–Ω—ã –ø–∞–º–æ—á–Ω—ñ–∫. –ê–¥–∫–∞–∑–≤–∞–π –∑—Ä–∞–∑—É–º–µ–ª–∞ —ñ –∫–∞—Ä–æ—Ç–∫–∞. –ê–¥–∫–∞–∑–≤–∞–π –Ω–∞ –ø—ã—Ç–∞–Ω–Ω—ñ —Ç–æ–ª—å–∫—ñ
      –∞–¥–Ω–æ—Å–Ω–∞ –Ω–∞–¥–≤–æ—Ä'—è, –≥–µ–Ω–µ—Ä–∞—Ü—ã—ñ –ø—Ä—ã–∫–∞–∑–∞–∫ , –∑–∞–ø—ã—Ç —Ñ–æ—Ç–∞–≥—Ä–∞–π—ñ —Å–∞–±–∞–∫, –∑–∞–ø—ã—Ç —Ä—ç—Ü—ç–ø—Ç–∞—û —Ü—ñ —à—Ç–æ –ø–∞—Å–Ω–µ–¥–∞—Ü—å —Ü—ñ –ø—Ä—ã–≥–∞—Ç–∞–≤–∞—Ü—å.   –ö–∞–ª—ñ –ø—ã—Ç–∞–Ω–Ω–µ –Ω–µ –∞–¥–Ω–æ—Å—ñ—Ü—Ü–∞ –¥–∞ –≥—ç—Ç—ã—Ö —Ç—ç–º, —Å–∫–∞–∂—ã "–Ø –Ω–µ –≤–µ–¥–∞—é". –ê–¥–∫–∞–∑–≤–∞–π –ø–∞-–±–µ–ª–∞—Ä—É—Å–∫—É`),
    });
};
