import TelegramBot from 'node-telegram-bot-api';
import { chatModel, Model } from './model';

const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) throw new Error('Missing TELEGRAM_BOT_TOKEN');

const bot = new TelegramBot(token, { polling: true });

const sessions = new Map<number, any>(); // üß† –¥–ª—è history

bot.onText(/\/start/, (msg) => {
    bot.sendMessage(
        msg.chat.id,
        '–ü—Ä—ã–≤—ñ—Ç–∞–Ω–Ω–µ! –Ø AI-–∞–≥–µ–Ω—Ç. –°–ø—ã—Ç–∞–π—Å—è –ø—Ä–∞ –Ω–∞–¥–≤–æ—Ä‚Äô–µ, –∫—É—Ä—Å –≤–∞–ª—é—Ç –∞–±–æ –Ω–∞–≤—ñ–Ω—ã.'
    );
    // clear  history
    sessions.set(msg.chat.id, []);
});

import { z } from 'zod';

const schema = z.object({
    is_scam: z.boolean().describe('Result of  checkein  text is scam or not'),
    description: z.string().describe('Description, why it is scam'),
});

const model = await chatModel(Model.GPT4o);
const structuredModel  = model.withStructuredOutput(schema);

bot.on('message', async (msg) => {
    const userId = msg.chat.id;
    bot.sendMessage(userId, '–ß–∞–∫–∞—é –∞–¥–∫–∞–∑—É...');
    const text = msg.text;
    if (!text || text.startsWith('/')) return;

    try {
        const history = sessions.get(userId) || [];
        bot.sendChatAction(userId, 'typing');
        const input = [...history,{
            role: 'system',
            content: `–¢—ã AI-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä –∫–∞–Ω–∞–ª—É –ø—Ä–∞ —Ç—ç—Ö–Ω–∞–ª–æ–≥—ñ—ñ. –¢–≤–∞—ë –∑–∞–¥–∞–Ω–Ω–µ - –≤—ã–∑–Ω–∞—á–∞—Ü—å, —Ü—ñ –∑'—è—û–ª—è–µ—Ü—Ü–∞ —Ç—ç–∫—Å—Ç —Å–∫–∞–º–∞–º —Ü—ñ —Å–ø–∞–º–∞–º. –ö–∞–ª—ñ —Ç–∞–∫, –¥–∞–π –ø–∞–¥—Ä–∞–±—è–∑–Ω–∞–µ —Ç–ª—É–º–∞—á—ç–Ω–Ω–µ, —á–∞–º—É —ë–Ω —Å–∫–∞–º —Ü—ñ —Å–ø–∞–º. –ö–∞–ª—ñ –Ω–µ, –¥–∞–π –ø–∞–¥—Ä–∞–±—è–∑–Ω–∞–µ —Ç–ª—É–º–∞—á—ç–Ω–Ω–µ, —á–∞–º—É —ë–Ω –Ω–µ —Å–∫–∞–º.`,
        }, { role: 'user', content: text }];
        const res = await structuredModel.invoke(input);

        const updated = res;
        console.log('Updated:', updated);


        // sessions.set(userId, updated.);
        bot.sendMessage(userId, `${updated.is_scam ? '–°–∫–∞–º' : '–ù–µ —Å–∫–∞–º'}\n\n${updated.description}, ${JSON.stringify(updated)}`);
    } catch (err: any) {
        console.error('Error:', err);
        bot.sendMessage(userId, '–ü–∞–º—ã–ª–∫–∞: ' + err.message);
    }
});
