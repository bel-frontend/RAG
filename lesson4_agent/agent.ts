import { createReactAgent } from '@langchain/langgraph/prebuilt';
import { chatModel, Model } from './model';
import { tool } from '@langchain/core/tools';
import { z } from 'zod';
import { SystemMessage } from '@langchain/core/messages';

const fetchJson = async (url: string) => {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`Fetch error ${res.status}`);
    return res.json();
};

const fetchText = async (url: string) => {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`Fetch error ${res.status}`);
    return res.text();
};

// üì¶ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 1: –Ω–∞–¥–≤–æ—Ä'–µ
const weatherTool = tool(
    async ({ city }: { city: string }) => {
        const res = await fetchText(`https://wttr.in/${city}?format=3`);
        return res || 'Cannot find weather.';
    },
    {
        name: 'get_weather',
        description: 'Get current weather for a given city',
        schema: z.object({ city: z.string() }), // –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–µ—Ü—Ü–∞ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ã—ñ
    }
);

const getProverbByTopic = tool(
    async () => {
        console.log('Fetching proverbs');

        const res = (await fetchJson(
            'https://gist.githubusercontent.com/bel-frontend/41775a79904f2535c4dd97d7990ad83d/raw/dc6c5cb1a849961833dd157454fd3ec11129883b/index.json'
        )) as { message: string }[];

        console.log(res);

        const allProverbsInOneString = res.reduce((acc, curr) => {
            return acc + curr.message + '\n';
        }, '');

        return allProverbsInOneString || 'Cannot find proverbs.';
    },
    {
        name: 'get_proverb_by_topic',
        description:
            'Get full list of proverbs   for search or selecting by topic',
    }
);

const model = await chatModel(Model.GPT4o);

export const agentApp = ({ bot, userId }: { bot: any; userId: number }) => {
    const getDogPhoto = tool(
        async () => {
            const res = (await fetchJson(
                'https://dog.ceo/api/breeds/image/random'
            )) as { message: string };
            const imageUrl = res?.message;
            if (!imageUrl) return '–ù–µ —û–¥–∞–ª–æ—Å—è –∞—Ç—Ä—ã–º–∞—Ü—å –≤—ã—è–≤—É —Å–∞–±–∞–∫—ñ.';
            bot.sendPhoto(userId, imageUrl);

            return '–í—ã—è–≤–∞ —Å–∞–±–∞–∫—ñ –¥–∞—Å–ª–∞–Ω–∞—è.';
        },
        {
            name: 'get_dog_photo',
            description: `Send to user random dog photo`,
        }
    );

    return createReactAgent({
        llm: model,
        tools: [weatherTool, getProverbByTopic, getDogPhoto],
        messageModifier:
            new SystemMessage(`–¢—ã —Ä–∞–∑—É–º–Ω—ã –ø–∞–º–æ—á–Ω—ñ–∫. –ê–¥–∫–∞–∑–≤–∞–π –∑—Ä–∞–∑—É–º–µ–ª–∞ —ñ –∫–∞—Ä–æ—Ç–∫–∞. –ê–¥–∫–∞–∑–≤–∞–π –Ω–∞ –ø—ã—Ç–∞–Ω–Ω—ñ —Ç–æ–ª—å–∫—ñ
      –∞–¥–Ω–æ—Å–Ω–∞ –Ω–∞–¥–≤–æ—Ä'—è, –≥–µ–Ω–µ—Ä–∞—Ü—ã—ñ –ø—Ä—ã–∫–∞–∑–∞–∫ —ñ —Ñ–æ—Ç—ã —Å–∞–±–∞–∫—ñ. –ö–∞–ª—ñ –ø—ã—Ç–∞–Ω–Ω–µ –Ω–µ –∞–¥–Ω–æ—Å—ñ—Ü—Ü–∞ –¥–∞ –≥—ç—Ç—ã—Ö —Ç—ç–º, —Å–∫–∞–∂—ã "–Ø –Ω–µ –≤–µ–¥–∞—é".`),
    });
};
